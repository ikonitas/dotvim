priority -50


snippet import_deleteview "Import DeleteView" b
from django.views.generic.edit import DeleteView
endsnippet


snippet import_formview "Import FormView" b
from django.views.generic import FormView
endsnippet


snippet import_updateview "Import UpdateView" b
from django.views.generic.edit import UpdateView
endsnippet


snippet import_listview "Import ListView" b
from django.views.generic.list import ListView
endsnippet


snippet import_templateview "Import TemplateView" b
from django.views.generic import TemplateView
endsnippet


snippet import_createview "Import CreateView" b
from django.views.generic.edit import CreateView
endsnippet


snippet import_detailview "Import DetailView" b
from django.views.generic.detail import DetailView
endsnippet


snippet import_python_2_unicode_compatible "Import python_2_unicode_compatible decorator" b
from django.utils.encoding import python_2_unicode_compatible
endsnippet


snippet import_reverse_lazy "Import reverse_lazy" b
from django.core.urlresolvers import reverse_lazy
endsnippet


snippet import_get_user_model "Import get_user_model" b
from django.contrib.auth import get_user_model
endsnippet


snippet import_render_to_string "Import render_to_string" b
from django.template.loader import render_to_string
endsnippet


snippet import_site_model "Import Site model" b
from django.contrib.sites.models import Site
endsnippet


snippet import_render "Import render" b
from django.shortcuts import render
endsnippet


snippet import_render "Import mark_safe" b
from django.utils.html import mark_safe
endsnippet


snippet import_permissiondenied "Import PermissionDenied" b
from django.core.exceptions import PermissionDenied
endsnippet


snippet created_at "DateTimeFiled" b
created_at = models.DateTimeField(auto_now_add=True)
endsnippet


snippet updated_at "DateTimeFiled" b
updated_at = models.DateTimeField(auto_now=True)
endsnippet


snippet model "Model" b
@python_2_unicode_compatible
class ${1:MODELNAME}(models.Model):
	${0}
	class Meta:
		verbose_name = "$1"
		verbose_name_plural = "$1s"
		ordering = ${2}

	def __str__(self):
		return super($1, self).__str__()
endsnippet


snippet form "Form" b
class ${1:FORMNAME}(forms.Form):

	${2:# TODO: Define form fields here}
endsnippet


snippet modelform "ModelForm" b
class ${1:MODELNAME}Form(forms.ModelForm):

	class Meta:
		model = $1
		fields = (${2})
endsnippet


snippet modeladmin "Model Admin View" b
@admin.register(${1:MODELNAME})
class $1Admin(admin.ModelAdmin):
	list_display = ('${2}',)
	list_filter = ('${3}',)
	readonly_fields = ('${4}',)
	search_fields = ['${5}']
	date_hierarchy = ${6}
	fieldsets = [
		('$1', {
			'fields': (${7}),
		}),
		('Meta', {
			'classes': ('collapse',),
			'fields': (${8}),
		}),
	]
endsnippet


snippet createview "Generic Create View" b
class $1CreateView(CreateView):
	model = ${1:MODEL_NAME}
	form_class = $1CreateForm
	template_name = "${2:TEMPLATE_NAME}"
	success_url = reverse_lazy()

	def get_context_data(self, **kwargs):
		context = super($1CreateView, self).get_context_data(**kwargs)
		return context

	def form_valid(self, form):
		messages.success(
			self.request,
			'The {object} was added successfully. You may edit it again below.'.format(
				object=form.instance
			)
		)
		return super($1CreateView, self).form_valid(form)
endsnippet


snippet deleteview "Generic Delete View" b
class $1DeleteView(DeleteView):
	model = ${1:MODEL_NAME}
	template_name = "${2:TEMPLATE_NAME}"
	success_url = reverse_lazy(${3})

	def get_context_data(self, **kwargs):
		context = super($1DeleteView, self).get_context_data(**kwargs)
		return context

	def delete(self, request, *args, **kwargs):
		response = super($1DeleteView, self).delete(request, *args, **kwargs)
		messages.success(request, '$1 was deleted successfully.')
		return response
endsnippet

snippet detailview "Generic Detail View" b
class $1DetailView(DetailView):
	model = ${1:MODEL_NAME}
	template_name = "$1_detail.html"

	def get_context_data(self, **kwargs):
		context = super($1DetailView, self).get_context_data(**kwargs)
		return context
endsnippet


snippet listview "Generic List View" b
class $1ListView(ListView):
	model = ${1:MODEL_NAME}
	template_name = "${2:TEMPLATE_NAME}"

	def get_context_data(self, **kwargs):
		context = super($1ListView, self).get_context_data(**kwargs)
		return context
endsnippet


snippet templateview "Generic Template View" b
class ${1:MODEL_NAME}TemplateView(TemplateView):
	template_name = "${2:TEMPLATE_NAME}"
endsnippet


snippet updateview "Generic Update View" b
class $1UpdateView(UpdateView):
	model = ${1:MODEL_NAME}
	form_class = $1Form
	template_name = "${2:TEMPLATE_NAME}"

	def get_context_data(self, **kwargs):
		context = super($1UpdateView, self).get_context_data(**kwargs)
		return context
endsnippet


snippet management_command "Management Comman" b
from django.core.management.base import BaseCommand, CommandError


class Command(BaseCommand):
	help = ''

	def handle(self, *args, **options):

		self.stdout.write(self.style.MIGRATE_SUCCESS('Successfully done.'))
endsnippet



snippet fieldsets "Add admin fieldset structure" b
fieldsets = (
	($1, {
		'fields': ($2)
	}),
)
endsnippet


snippet has_add_permissions "Model admin method has_add_permission"
def has_add_permission(self, request):
	$1
endsnippet


snippet import_messages "Import django.contrib.messages"
from django.contrib import messages
endsnippet


snippet changelist_view "Model admin changelist_view"
def changelist_view(self, request, extra_context=None):
	$1
endsnippet


snippet get_success_url "Edit views get_success_url method"
def get_success_url(self):
	return reverse()
endsnippet


snippet get_form_class "Method to get form_class for the view"
def get_form_class(self):
	return self.form_class
endsnippet


snippet get_urls "Admin method to get_urls"
def get_urls(self):

	app_label, model_name = self.model._meta.app_label, self.model._meta.model_name

	urls = super().get_urls()
	extra_urls = [
		url(
			r'^(\d+)/$1/$',
			self.admin_site.admin_view(self.$2),
			name='{app_label}_{model_name}_$1'.format(
				app_label=app_label,
				model_name=model_name,
			),
		)
	]
	return extra_urls + urls
endsnippet


snippet successfully_sent "Message for successfully send email"
You have successfully sent the email
endsnippet


snippet updated_by_admin "Add save_model method update who  created or updated the obj"
def save_model(self, request, obj, form, change):
	""" Assign user to the object created_by and updated_by. """
	if obj.id and change:
		obj.updated_by = request.user
	if not obj.id:
		obj.created_by = request.user
		obj.updated_by = request.user
	super().save_model(request, obj, form, change)
endsnippet


snippet has_add_permission_count "Only one object can be added"
def has_add_permission(self, request):
	"""Just one template can be added."""
	if self.model.objects.count() > 0:
		return False
	return super().has_add_permission(request)
endsnippet


snippet factory_model "Add factory model"
import factory

class ${1:MODELANME}Factory(factory.django.DjangoModelFactory):
	title = factory.Faker('job')
	logo = factory.django.ImageField(color='blue')
	slug = factory.LazyAttribute(lambda a: slugify(a.name))
	theme = factory.SubFactory(ThemeFactory)
	many_to_many = factory.RelatedFactory(manytomayFactory)

	class Meta:
		model = $1
endsnippet
