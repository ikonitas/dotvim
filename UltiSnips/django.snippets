priority -50


snippet import_python_2_unicode_compatible "Import python_2_unicode_compatible decorator" b
from django.utils.encoding import python_2_unicode_compatible
endsnippet

snippet import_listview "Import ListView" b
from django.views.generic.list import ListView
endsnippet

snippet import_templateview "Import TemplateView" b
from django.views.generic import TemplateView
endsnippet


snippet created_at "DateTimeFiled" b
created_at = models.DateTimeField(auto_now_add=True)
endsnippet


snippet updated_at "DateTimeFiled" b
updated_at = models.DateTimeField(auto_now=True)
endsnippet


snippet model "Model" b
@python_2_unicode_compatible
class ${1:MODELNAME}(models.Model):
	${0}
	class Meta:
		verbose_name = "$1"
		verbose_name_plural = "$1s"
		ordering = ${2}

	def __str__(self):
		return super($1, self).__str__()
endsnippet


snippet form "Form" b
class ${1:FORMNAME}(forms.Form):

	${2:# TODO: Define form fields here}
endsnippet


snippet modelform "ModelForm" b
class ${1:MODELNAME}Form(forms.ModelForm):

	class Meta:
		model = $1
endsnippet


snippet adminview "Model Admin View" b
@admin.register(${1})
class $1Admin(admin.ModelAdmin):
	list_display = ('${3}',)
	list_filter = ('${4}',)
	search_fields = ['${5}']
	readonly_fields = ('${6}',)
	fieldsets = (
		(
			'$1', {
				'fields': (
					'',
				)
			}
		),
		(
			'Meta', {
			    'classes': ('collapse',), 
				'fields': (
				)
			}
		),
	)
endsnippet


snippet createview "Generic Create View" b
class $1CreateView(CreateView):
	model = ${1:MODEL_NAME}
	template_name = "${2:TEMPLATE_NAME}"

	def get_context_data(self, **kwargs):
		context = super($1ListView, self).get_context_data(**kwargs)
		return context
endsnippet


snippet deleteview "Generic Delete View" b
class $1DeleteView(DeleteView):
	model = ${1:MODEL_NAME}
	template_name = "${2:TEMPLATE_NAME}"

	def get_context_data(self, **kwargs):
		context = super($1ListView, self).get_context_data(**kwargs)
		return context
endsnippet

snippet detailview "Generic Detail View" b
class ${1:MODEL_NAME}DetailView(DetailView):
	model = ${1:MODEL_NAME}
	template_name = "${2:TEMPLATE_NAME}"

	def get_context_data(self, **kwargs):
		context = super($1ListView, self).get_context_data(**kwargs)
		return context
endsnippet

snippet listview "Generic List View" b
class $1ListView(ListView):
	model = ${1:MODEL_NAME}
	template_name = "${2:TEMPLATE_NAME}"

	def get_context_data(self, **kwargs):
		context = super($1ListView, self).get_context_data(**kwargs)
		return context
endsnippet


snippet templateview "Generic Template View" b
class ${1:MODEL_NAME}TemplateView(TemplateView):
	template_name = "${2:TEMPLATE_NAME}"
endsnippet


snippet updateview "Generic Update View" b
class $1UpdateView(UpdateView):
	model = ${1:MODEL_NAME}
	template_name = "${2:TEMPLATE_NAME}"

	def get_context_data(self, **kwargs):
		context = super($1ListView, self).get_context_data(**kwargs)
		return context
endsnippet
